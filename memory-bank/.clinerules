# Cline Rules for Vacasa Home Assistant Integration

## Version Update Process

**CRITICAL**: When updating versions, ALWAYS update both:
1. `VERSION` file in project root
2. `custom_components/vacasa/manifest.json` version field

These must match exactly or Home Assistant integration management will fail.

## Technical Debt Review Checklist

Before any release, systematically check for:

### Code Quality
- [ ] Unused imports (especially after major refactoring)
- [ ] Dead code paths and commented-out code
- [ ] Inconsistent patterns between files
- [ ] Deprecated Home Assistant API usage
- [ ] Redundant constants in const.py

### Security
- [ ] No sensitive data in debug logs (tokens, usernames, passwords)
- [ ] Proper error handling without information leakage
- [ ] Secure file permissions for cache files

### Architecture
- [ ] Consistent refresh strategies across all entities
- [ ] Proper coordinator usage patterns
- [ ] No blocking calls in async functions
- [ ] Timezone handling consistency

### Refresh Strategy Rules
- ALL Vacasa data refresh should follow the user-configured refresh interval
- Binary sensors should listen to coordinator updates without inheriting from CoordinatorEntity
- No independent timers for different entity types
- Occupancy data doesn't change frequently enough to warrant separate refresh cycles

## Release Process

### Pre-Release Checklist
1. **Version Consistency Check**
   - [ ] `VERSION` file updated
   - [ ] `custom_components/vacasa/manifest.json` version matches VERSION file exactly
   - [ ] CHANGELOG.md has entry for new version with proper date (YYYY-MM-DD format)

2. **Code Quality Verification**
   - [ ] Run `pre-commit run --all-files` and ensure all checks pass
   - [ ] No sensitive data in debug logs (tokens, usernames, passwords)
   - [ ] All imports are used (no dead code)
   - [ ] Technical debt review completed using checklist above

3. **Documentation Updates**
   - [ ] CHANGELOG.md is complete and accurate
   - [ ] README.md reflects any new features (if applicable)
   - [ ] All breaking changes documented
   - [ ] GitHub issue template updated if needed

4. **Testing Verification**
   - [ ] Basic smoke test (integration loads without errors)
   - [ ] Authentication flow works
   - [ ] Calendar entities appear
   - [ ] Binary sensors show correct states

### Git Release Process
1. **Branch Management**
   ```bash
   # Ensure all changes are committed on development branch
   git add .
   git commit -m "Release v1.0.x: [brief description]"

   # Switch to main and merge
   git checkout main
   git merge development

   # Tag the release
   git tag v1.0.x

   # Push everything
   git push origin main
   git push origin --tags
   ```

2. **GitHub Release Creation**
   - Use MCP GitHub integration to create release from tag
   - Extract relevant CHANGELOG section for release notes
   - Mark as latest release
   - Verify release appears correctly

3. **HACS Validation**
   - Verify integration appears in HACS
   - Check for any HACS validation errors
   - Test installation from HACS

### Post-Release Verification
- [ ] GitHub release created successfully
- [ ] Tag appears in repository
- [ ] HACS shows new version
- [ ] No immediate error reports
- [ ] Documentation links work

### Rollback Process (if needed)
```bash
# Remove tag if release has issues
git tag -d v1.0.x
git push origin :refs/tags/v1.0.x

# Revert main branch if needed
git revert <commit-hash>
```

### MCP GitHub Commands
- Create release: Use GitHub MCP server with tag and changelog extract
- Update release: Modify existing release if needed
- List releases: Verify release creation

## Project Patterns

### Authentication Flow
- The Vacasa authentication flow requires `response_type=token` (not `token,id_token`)
- Authentication tokens are returned in URL fragments after successful login
- Tokens expire after approximately 10 minutes
- Token refresh should be handled proactively before expiration

### API Patterns
- All API requests require Bearer token authentication
- The `X-Authorization-Contact` header must include the owner ID
- Reservation data is categorized by examining the `ownerHold` attribute
- Guest bookings have firstName/lastName but no ownerHold
- Owner stays have an ownerHold with holdType containing "owner"

### Home Assistant Integration
- Follow the calendar platform interface exactly
- Store credentials using Home Assistant secrets
- Use async methods throughout for compatibility
- Implement config flow for better user experience

## Code Organization
- Keep the API client separate from Home Assistant integration code
- Use constants for all string literals
- Follow Home Assistant coding standards
- Implement proper error handling and logging

## User Preferences
- Default refresh interval: 4 hours
- Secure token storage with 0600 permissions
- One calendar per property for granular control
- Clear categorization of stay types in calendar events

## Known Challenges
- Vacasa API is not officially documented and may change
- Authentication tokens have short expiration times
- Rate limiting is unknown and should be handled conservatively
- Error handling must be robust to handle API changes

## Testing Strategy
- Test authentication flow thoroughly with different credentials
- Verify token refresh works correctly
- Test reservation categorization with various stay types
- Ensure calendar events are created correctly

## Implementation Path
1. Complete and test the API client
2. Implement the Home Assistant calendar platform
3. Create the configuration flow
4. Add services for manual refresh
5. Package for distribution

## Security Considerations
- Never log credentials or tokens
- Store tokens with appropriate file permissions
- Validate all API responses before processing
- Handle authentication failures gracefully
