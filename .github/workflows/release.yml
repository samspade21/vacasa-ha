name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  hacs-validate:
    runs-on: ubuntu-latest
    name: HACS Validation
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate HACS requirements
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: hacs-validate
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Get version from tag
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION=$(echo $VERSION | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog from CHANGELOG.md
        id: changelog
        run: |
          python -c "
          import sys

          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()

              # Extract section for current version
              version = '${{ steps.version.outputs.version }}'
              lines = content.split('\n')
              in_version_section = False
              changelog_lines = []

              for line in lines:
                  if line.startswith('## ') and version in line:
                      in_version_section = True
                      continue
                  elif line.startswith('## ') and in_version_section:
                      break
                  elif in_version_section:
                      changelog_lines.append(line)

              changelog_content = '\n'.join(changelog_lines).strip()

              if not changelog_content:
                  changelog_content = f'Release version {version}'

              # Save changelog to file
              with open('release_notes.txt', 'w') as f:
                  f.write(changelog_content)

              print(f'Generated changelog for version {version}')

          except Exception as e:
              print(f'Error generating changelog: {e}')
              # Fallback
              with open('release_notes.txt', 'w') as f:
                  f.write(f'Release version ${{ steps.version.outputs.version }}')
          "

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          bodyFile: release_notes.txt
          draft: false
          prerelease: false
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release archive
        run: |
          mkdir -p release/custom_components
          cp -r custom_components/vacasa release/custom_components/
          cd release
          zip -r ../vacasa-${{ steps.version.outputs.version }}.zip .
          cd ..

      - name: Upload release archive
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.tag }}
          artifacts: "vacasa-${{ steps.version.outputs.version }}.zip"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  notify-hacs:
    runs-on: ubuntu-latest
    name: Notify HACS
    needs: create-release
    if: success()
    steps:
      - name: Wait for release
        run: sleep 30

      - name: Display release information
        run: |
          echo "### ðŸŽ‰ Release v${{ needs.create-release.outputs.version || github.ref_name }} Created!" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **HACS Distribution:** Updates will be available shortly" >> $GITHUB_STEP_SUMMARY
          echo "- **Download Archive:** vacasa-${{ needs.create-release.outputs.version || github.ref_name }}.zip" >> $GITHUB_STEP_SUMMARY
