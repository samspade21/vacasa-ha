name: Auto Tag and Release

on:
  push:
    branches:
      - main

jobs:
  auto-tag-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Check if this is a release merge
        id: check-release
        run: |
          # Get the last commit message for info
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $LAST_COMMIT_MSG"

          # Check if VERSION file changed in this push across all commits
          # Use GitHub event data to compare before/after push state
          CHANGED_FILES=$(git diff ${{ github.event.before }} ${{ github.sha }} --name-only)
          if echo "$CHANGED_FILES" | grep -q "^VERSION$"; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "VERSION file changed - this appears to be a release merge"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "VERSION file unchanged - this is not a release merge, skipping tag creation"
          fi

      - name: Get version from files
        id: get-version
        if: steps.check-release.outputs.is_release == 'true'
        run: |
          # Read version from VERSION file
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION | tr -d '[:space:]')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "Found version: $VERSION"
          else
            echo "VERSION file not found"
            exit 1
          fi

          # Validate version in manifest.json matches
          MANIFEST_VERSION=$(python -c "
          import json
          with open('custom_components/vacasa/manifest.json', 'r') as f:
              manifest = json.load(f)
          print(manifest.get('version', ''))
          ")

          if [ "$VERSION" != "$MANIFEST_VERSION" ]; then
            echo "Version mismatch: VERSION file ($VERSION) != manifest.json ($MANIFEST_VERSION)"
            exit 1
          fi

          echo "Version validation passed: $VERSION"

      - name: Check if tag already exists
        id: check-tag
        if: steps.check-release.outputs.is_release == 'true'
        run: |
          TAG_NAME="${{ steps.get-version.outputs.tag }}"
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME already exists, skipping creation"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME does not exist, will create"
          fi

      - name: Extract changelog for version
        id: changelog
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"

          # Extract changelog section for this version
          python -c "
          import sys

          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()

              lines = content.split('\n')
              in_version_section = False
              changelog_lines = []
              version = '${{ steps.get-version.outputs.version }}'

              for line in lines:
                  if line.startswith('## ') and version in line:
                      in_version_section = True
                      continue
                  elif line.startswith('## ') and in_version_section:
                      break
                  elif in_version_section:
                      changelog_lines.append(line)

              changelog_content = '\n'.join(changelog_lines).strip()

              if not changelog_content:
                  changelog_content = f'Release version {version}'

              # Write to file for GitHub Actions
              with open('tag_message.txt', 'w') as f:
                  f.write(f'Release {version}\n\n{changelog_content}')

              # Also save just changelog content for release
              with open('release_notes.txt', 'w') as f:
                  f.write(changelog_content)

              print(f'Extracted changelog for version {version}')

          except Exception as e:
              print(f'Error extracting changelog: {e}')
              # Fallback message
              version = '${{ steps.get-version.outputs.version }}'
              with open('tag_message.txt', 'w') as f:
                  f.write(f'Release {version}')
              with open('release_notes.txt', 'w') as f:
                  f.write(f'Release version {version}')
          "

      - name: Create and push tag
        id: create-tag
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          TAG_NAME="${{ steps.get-version.outputs.tag }}"
          VERSION="${{ steps.get-version.outputs.version }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag with changelog message
          git tag -a "$TAG_NAME" -F tag_message.txt

          # Push the tag
          git push origin "$TAG_NAME"

          echo "✅ Created and pushed tag: $TAG_NAME"
          echo "tag_created=true" >> $GITHUB_OUTPUT

      - name: Run HACS validation
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands

      - name: Create release archive
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          mkdir -p release/custom_components
          cp -r custom_components/vacasa release/custom_components/
          cd release
          zip -r ../vacasa-${{ steps.get-version.outputs.version }}.zip .
          cd ..

      - name: Create GitHub Release
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get-version.outputs.tag }}
          name: Release ${{ steps.get-version.outputs.tag }}
          bodyFile: release_notes.txt
          artifacts: "vacasa-${{ steps.get-version.outputs.version }}.zip"
          draft: false
          prerelease: false
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary for successful release
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          echo "### 🎉 Release ${{ steps.get-version.outputs.tag }} Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** \`${{ steps.get-version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.get-version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **HACS Distribution:** Updates will be available shortly" >> $GITHUB_STEP_SUMMARY
          echo "- **Download Archive:** vacasa-${{ steps.get-version.outputs.version }}.zip" >> $GITHUB_STEP_SUMMARY

      - name: Summary for non-release
        if: steps.check-release.outputs.is_release == 'false'
        run: |
          echo "### ℹ️ Non-Release Commit" >> $GITHUB_STEP_SUMMARY
          echo "This commit to main branch was not identified as a release merge." >> $GITHUB_STEP_SUMMARY
          echo "No tag was created." >> $GITHUB_STEP_SUMMARY

      - name: Summary for existing tag
        if: steps.check-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'true'
        run: |
          echo "### ⚠️ Tag Already Exists" >> $GITHUB_STEP_SUMMARY
          echo "Tag \`${{ steps.get-version.outputs.tag }}\` already exists." >> $GITHUB_STEP_SUMMARY
          echo "No new tag or release was created." >> $GITHUB_STEP_SUMMARY
